{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VR Gaze Python repository to analyze data from VR experiments. Three steps are required to install the package: Install Python (3.6 or higher) Install an IDE (e.g. Visual studio code, PyCharm, Jupyter notebook, Spyder) Open the IDE in a folder of your choice. This is your root project folder. Place a script main.py inside of the root folder Install the vrgaze package using pip (below) If you are in an IDE, open a terminal and type the following commands: pip install --upgrade git+https://github.com/vrijeuniversiteit/vrgaze.git Analyzing tennis data from vrgaze.tennis import load_condition, ExperimentalData, plot_3d, plot_birdview, plot_side from vrgaze.tennis import plot_gaze_ball_angle \"\"\" 1. Copy this script and put it at the root/main folder of your project. Call the script `main.py`. 2. Place all experimental data (csv files) in a folder called 'data' in the root of your project. 3. Inside of the folder, it is possible to creat sub-folders for each experimental conditions. See the function load_condition for more details. The folder structure should look like this: project root folder/ \u2502 \u251c\u2500\u2500 data/ \u2502 \u251c\u2500\u2500 GROUP_1_NAME/ \u2502 \u2502 \u251c\u2500\u2500 participant_1.csv \u2502 \u2502 \u2514\u2500\u2500 participant_2.csv \u2502 \u2514\u2500\u2500 GROUP_2_NAME/ \u2502 \u251c\u2500\u2500 participant_3.csv \u2502 \u2514\u2500\u2500 participant_4.csv \u2502 \u251c\u2500\u2500 main.py 4. Set the group names in this script (here for example: Experts and Novices) 5. Set the path to the data folder (where the data is located, relative to this script) 6. Run this script \"\"\" experts = load_condition(\"Experts\", \"data/GROUP_1_NAME\") novices = load_condition(\"Novices\", \"data/GROUP_2_NAME\") data = ExperimentalData([novices, experts]) data.analyze_trials() data.to_csv(\"example_results.csv\") should_plot = True if should_plot: # Visualize the gaze data for a specific trial # Adjust the desired trial as needed or loop over all trials to generate plots for all trials DESIRED_TRIAL = 5 plot = plot_gaze_ball_angle(data, trial_number=DESIRED_TRIAL) plot.savefig(\"plot_gaze_ball_angle.png\") plot.show() plot = plot_3d(data) plot.savefig(\"plot_3d.png\") plot.show() plot = plot_birdview(data) plot.savefig(\"plot_birdview.png\") plot.show() plot = plot_side(data) plot.savefig(\"plot_side.png\") plot.show() Examples","title":"Home"},{"location":"#vr-gaze","text":"Python repository to analyze data from VR experiments. Three steps are required to install the package: Install Python (3.6 or higher) Install an IDE (e.g. Visual studio code, PyCharm, Jupyter notebook, Spyder) Open the IDE in a folder of your choice. This is your root project folder. Place a script main.py inside of the root folder Install the vrgaze package using pip (below) If you are in an IDE, open a terminal and type the following commands: pip install --upgrade git+https://github.com/vrijeuniversiteit/vrgaze.git","title":"VR Gaze"},{"location":"#analyzing-tennis-data","text":"from vrgaze.tennis import load_condition, ExperimentalData, plot_3d, plot_birdview, plot_side from vrgaze.tennis import plot_gaze_ball_angle \"\"\" 1. Copy this script and put it at the root/main folder of your project. Call the script `main.py`. 2. Place all experimental data (csv files) in a folder called 'data' in the root of your project. 3. Inside of the folder, it is possible to creat sub-folders for each experimental conditions. See the function load_condition for more details. The folder structure should look like this: project root folder/ \u2502 \u251c\u2500\u2500 data/ \u2502 \u251c\u2500\u2500 GROUP_1_NAME/ \u2502 \u2502 \u251c\u2500\u2500 participant_1.csv \u2502 \u2502 \u2514\u2500\u2500 participant_2.csv \u2502 \u2514\u2500\u2500 GROUP_2_NAME/ \u2502 \u251c\u2500\u2500 participant_3.csv \u2502 \u2514\u2500\u2500 participant_4.csv \u2502 \u251c\u2500\u2500 main.py 4. Set the group names in this script (here for example: Experts and Novices) 5. Set the path to the data folder (where the data is located, relative to this script) 6. Run this script \"\"\" experts = load_condition(\"Experts\", \"data/GROUP_1_NAME\") novices = load_condition(\"Novices\", \"data/GROUP_2_NAME\") data = ExperimentalData([novices, experts]) data.analyze_trials() data.to_csv(\"example_results.csv\") should_plot = True if should_plot: # Visualize the gaze data for a specific trial # Adjust the desired trial as needed or loop over all trials to generate plots for all trials DESIRED_TRIAL = 5 plot = plot_gaze_ball_angle(data, trial_number=DESIRED_TRIAL) plot.savefig(\"plot_gaze_ball_angle.png\") plot.show() plot = plot_3d(data) plot.savefig(\"plot_3d.png\") plot.show() plot = plot_birdview(data) plot.savefig(\"plot_birdview.png\") plot.show() plot = plot_side(data) plot.savefig(\"plot_side.png\") plot.show()","title":"Analyzing tennis data"},{"location":"#examples","text":"","title":"Examples"},{"location":"contribute/","text":"Contribute Creating pull request To contribute to the repository, clone the repository from GitHub and create a fork. git clone https://github.com/vrijeuniversiteit/vrgaze.git cd vrgaze git remote add fork https://github.com/my-user/my-fork.git git push --set-upstream fork master # Edit some files # Add changes to the staging area git add . git commit -m \"Add changes\" Testing if project works Run the following lines in the terminal to test if the project works: pre-commit install pre-commit run --all-files After installing the pre-commit hook, the hook will also run automatically on each commit.","title":"Contribute"},{"location":"contribute/#contribute","text":"","title":"Contribute"},{"location":"contribute/#creating-pull-request","text":"To contribute to the repository, clone the repository from GitHub and create a fork. git clone https://github.com/vrijeuniversiteit/vrgaze.git cd vrgaze git remote add fork https://github.com/my-user/my-fork.git git push --set-upstream fork master # Edit some files # Add changes to the staging area git add . git commit -m \"Add changes\"","title":"Creating pull request"},{"location":"contribute/#testing-if-project-works","text":"Run the following lines in the terminal to test if the project works: pre-commit install pre-commit run --all-files After installing the pre-commit hook, the hook will also run automatically on each commit.","title":"Testing if project works"},{"location":"issues/","text":"Having Issues? If you have any issues with the project, please feel free to open an issue on the GitHub repository .","title":"Having Issues?"},{"location":"issues/#having-issues","text":"If you have any issues with the project, please feel free to open an issue on the GitHub repository .","title":"Having Issues?"},{"location":"setup_python/","text":"Setup python Installing Python 3.x Installing Visual studio code Running scripts in Visual studio code Join a coding session","title":"Setup Python"},{"location":"setup_python/#setup-python","text":"","title":"Setup python"},{"location":"setup_python/#installing-python-3x","text":"","title":"Installing Python 3.x"},{"location":"setup_python/#installing-visual-studio-code","text":"","title":"Installing Visual studio code"},{"location":"setup_python/#running-scripts-in-visual-studio-code","text":"","title":"Running scripts in Visual studio code"},{"location":"setup_python/#join-a-coding-session","text":"","title":"Join a coding session"},{"location":"tennis/","text":"Tennis analysis To analyze data from the Tennis VR environment, collect all the data files ( .csv ) and place them in a folder. If you want to compare data from different experimental conditions (e.g., experts versus beginners), create two separate folders. The folder for each condition should only have the csv files from that condition and no sub folders. In case only a single condition is examined, place all .csv files in a single folder. Loading data export load load_condition ( group_name , folder_path ) Load data from an experimental condition Parameters: Name Type Description Default group_name str Name of the experimental condition. required folder_path str Path to the folder containing the data files required Returns: Name Type Description Condition Condition Data from the experimental condition Examples: For a single condition: >>> condition = load_condition ( \"Experts\" , \"path/to/folder\" ) >>> print ( condition ) >>> Name = Experts , Participants = 10 >>> >>> data = ExperimentalData ( condition ) For several conditions: >>> experts = load_condition ( \"Experts\" , \"path/to/folder\" ) >>> novices = load_condition ( \"Novices\" , \"path/to/folder\" ) >>> data = ExperimentalData ([ experts , novices ]) Source code in vrgaze/tennis/services/io/load.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def load_condition ( group_name : str , folder_path : str ) -> Condition : \"\"\"Load data from an experimental condition Args: group_name (str): Name of the experimental condition. folder_path (str): Path to the folder containing the data files Returns: Condition: Data from the experimental condition Examples: # For a single condition: >>> condition = load_condition(\"Experts\", \"path/to/folder\") >>> print(condition) >>> Name=Experts, Participants=10 >>> >>> data = ExperimentalData(condition) # For several conditions: >>> experts = load_condition(\"Experts\", \"path/to/folder\") >>> novices = load_condition(\"Novices\", \"path/to/folder\") >>> data = ExperimentalData([experts, novices]) \"\"\" reader = Reader () reader . discover_files ( folder_path ) reader . read_files () condition = Condition ( group_name , reader . participants ) return condition Saving data balleventmodels BallHitFrontWall dataclass Bases: Event Ball was returned too hard and hit the front wall before landing on the court Source code in vrgaze/tennis/models/balleventmodels.py 19 20 21 class BallHitFrontWall ( Event ): \"\"\"Ball was returned too hard and hit the front wall before landing on the court\"\"\" pass experiment ExperimentalData dataclass Bases: Visitable Source code in vrgaze/tennis/models/experiment.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @dataclass class ExperimentalData ( Visitable ): conditions : List [ Condition ] def __init__ ( self , data : Union [ List [ Condition ], Condition ]): if isinstance ( data , list ): self . conditions = data else : self . conditions = [ data ] def process ( self , visitor : \"Visitor\" ): for condition in self . conditions : condition . process ( visitor ) def analyze_trials ( self ): visitors = [ Preprocess (), BallEvents (), GazeEvents () ] for visitor in visitors : for condition in self . conditions : condition . process ( visitor ) def to_csv ( self , filepath : str ) -> None : \"\"\"Export gaze data to a CSV file. Args: filepath (str): File path to save the results Examples: # Exporting data >>> experts = load_condition(\"Experts\", \"example_data/tennis_data/experimental_condition\") >>> novices = load_condition(\"Novices\", \"example_data/tennis_data/experimental_condition\") >>> >>> data = ExperimentalData([experts, novices]) >>> data.analyze_trials() >>> data.to_csv(\"example_results.csv\") # Understanding the data FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\": The name of the condition given when the data is loaded >>> \"Participant\": The participant ID >>> \"BallNumber\": The current ball number >>> \"BlockNumber\": The current block number >>> \"TestID\": The current test number >>> \"IsValid\": Whether the trial is valid or not. A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp: The timestamp of the first bounce >>> FirstBouncePositionX: The X position of the first bounce >>> FirstBouncePositionY: The Y position of the first bounce >>> FirstBouncePositionZ: The Z position of the first bounce >>> SaccadeTimestamp: The timestamp of the predictive saccade >>> SaccadeAngleAmplitude: The angle amplitude of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeStart: The angle between the ball and the gaze direction at the start of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeEnd: The angle between the ball and the gaze direction at the end of the predictive saccade [degrees] >>> BallLandingPositionX: The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY: The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ: The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget: The distance between the ball and the target at the end of the predictive saccade \"\"\" writer = CSVWriter () for condition in self . conditions : writer . visit_condition ( condition , condition . name ) writer . save ( filepath ) to_csv ( filepath ) Export gaze data to a CSV file. Parameters: Name Type Description Default filepath str File path to save the results required Examples: Exporting data >>> experts = load_condition ( \"Experts\" , \"example_data/tennis_data/experimental_condition\" ) >>> novices = load_condition ( \"Novices\" , \"example_data/tennis_data/experimental_condition\" ) >>> >>> data = ExperimentalData ([ experts , novices ]) >>> data . analyze_trials () >>> data . to_csv ( \"example_results.csv\" ) Understanding the data FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\" : The name of the condition given when the data is loaded >>> \"Participant\" : The participant ID >>> \"BallNumber\" : The current ball number >>> \"BlockNumber\" : The current block number >>> \"TestID\" : The current test number >>> \"IsValid\" : Whether the trial is valid or not . A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp : The timestamp of the first bounce >>> FirstBouncePositionX : The X position of the first bounce >>> FirstBouncePositionY : The Y position of the first bounce >>> FirstBouncePositionZ : The Z position of the first bounce >>> SaccadeTimestamp : The timestamp of the predictive saccade >>> SaccadeAngleAmplitude : The angle amplitude of the predictive saccade [ degrees ] >>> AngleBallToGazeAtSaccadeStart : The angle between the ball and the gaze direction at the start of the predictive saccade [ degrees ] >>> AngleBallToGazeAtSaccadeEnd : The angle between the ball and the gaze direction at the end of the predictive saccade [ degrees ] >>> BallLandingPositionX : The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY : The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ : The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget : The distance between the ball and the target at the end of the predictive saccade Source code in vrgaze/tennis/models/experiment.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def to_csv ( self , filepath : str ) -> None : \"\"\"Export gaze data to a CSV file. Args: filepath (str): File path to save the results Examples: # Exporting data >>> experts = load_condition(\"Experts\", \"example_data/tennis_data/experimental_condition\") >>> novices = load_condition(\"Novices\", \"example_data/tennis_data/experimental_condition\") >>> >>> data = ExperimentalData([experts, novices]) >>> data.analyze_trials() >>> data.to_csv(\"example_results.csv\") # Understanding the data FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\": The name of the condition given when the data is loaded >>> \"Participant\": The participant ID >>> \"BallNumber\": The current ball number >>> \"BlockNumber\": The current block number >>> \"TestID\": The current test number >>> \"IsValid\": Whether the trial is valid or not. A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp: The timestamp of the first bounce >>> FirstBouncePositionX: The X position of the first bounce >>> FirstBouncePositionY: The Y position of the first bounce >>> FirstBouncePositionZ: The Z position of the first bounce >>> SaccadeTimestamp: The timestamp of the predictive saccade >>> SaccadeAngleAmplitude: The angle amplitude of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeStart: The angle between the ball and the gaze direction at the start of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeEnd: The angle between the ball and the gaze direction at the end of the predictive saccade [degrees] >>> BallLandingPositionX: The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY: The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ: The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget: The distance between the ball and the target at the end of the predictive saccade \"\"\" writer = CSVWriter () for condition in self . conditions : writer . visit_condition ( condition , condition . name ) writer . save ( filepath ) Plotting data plot_3d plot_3d ( data ) Plot ball trajectories in 3D space. Returns: Name Type Description plt pyplot The plot. Examples: >>> plot = plot_3d ( data ) >>> plot . show () >>> plot . savefig ( \"plot_3d.png\" ) Source code in vrgaze/tennis/services/plots/plot_3d.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def plot_3d ( data : ExperimentalData ) -> plt : \"\"\"Plot ball trajectories in 3D space. Returns: plt: The plot. Examples: >>> plot = plot_3d(data) >>> plot.show() >>> plot.savefig(\"plot_3d.png\") \"\"\" trajectories = [] enumerator = TrialEnumerator () data . process ( enumerator ) for trial in enumerator . trials : width = [ frame . ball_position_x for frame in trial . frames ] length = [ frame . ball_position_z for frame in trial . frames ] height = [ frame . ball_position_y for frame in trial . frames ] trajectories . append ( Trajectory ( length , height , width )) number_of_trajectories = len ( trajectories ) alpha = 1 / number_of_trajectories if alpha < 0.002 : alpha = 0.002 ax = plt . axes ( projection = '3d' ) for trajectory in trajectories : ax . plot3D ( trajectory . width , trajectory . length , trajectory . height , c = 'black' , alpha = alpha ) half_width = 10.97 / 2 half_length = 23.77 / 2 half_single_width = 8.23 / 2 to_service_t = 6.4 half_net_width = ( 10.97 + 0.91 ) / 2 # Service lines ax . plot ([ - half_width , half_width ], [ half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ - half_width , half_width ], [ - half_length , - half_length ], [ 0 , 0 ], color = 'black' ) # Sidelines ax . plot ([ - half_width , - half_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ half_width , half_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) # Single lines ax . plot ([ - half_single_width , - half_single_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ half_single_width , half_single_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) # T line ax . plot ([ - half_single_width , half_single_width ], [ - to_service_t , - to_service_t ], [ 0 , 0 ], color = 'black' ) ax . plot ([ - half_single_width , half_single_width ], [ to_service_t , to_service_t ], [ 0 , 0 ], color = 'black' ) ax . plot ([ 0 , 0 ], [ - to_service_t , to_service_t ], [ 0 , 0 ], color = 'black' ) # center nubbin ax . plot ([ 0 , 0 ], [ - half_length , - half_length + 0.3 ], [ 0 , 0 ], color = 'black' ) ax . plot ([ 0 , 0 ], [ half_length , half_length - 0.3 ], [ 0 , 0 ], color = 'black' ) # Net ax . plot ([ - half_net_width , half_net_width ], [ 0 , 0 ], [ 1.065 , 1.065 ], color = 'black' ) ax . plot ([ - half_net_width , half_net_width ], [ 0 , 0 ], [ 0 , 0 ], color = 'black' ) # net posts ax . plot ([ - half_net_width , - half_net_width ], [ 0 , 0 ], [ 0 , 1.065 ], color = 'black' ) ax . plot ([ half_net_width , half_net_width ], [ 0 , 0 ], [ 0 , 1.065 ], color = 'black' ) ax . set_aspect ( 'equal' ) ax . set_zlim ( bottom = 0 ) return plt plot_birdview plot_side","title":"Tennis"},{"location":"tennis/#tennis-analysis","text":"To analyze data from the Tennis VR environment, collect all the data files ( .csv ) and place them in a folder. If you want to compare data from different experimental conditions (e.g., experts versus beginners), create two separate folders. The folder for each condition should only have the csv files from that condition and no sub folders. In case only a single condition is examined, place all .csv files in a single folder.","title":"Tennis analysis"},{"location":"tennis/#loading-data","text":"","title":"Loading data"},{"location":"tennis/#vrgaze.tennis.services.io.export","text":"","title":"export"},{"location":"tennis/#vrgaze.tennis.services.io.load","text":"","title":"load"},{"location":"tennis/#vrgaze.tennis.services.io.load.load_condition","text":"Load data from an experimental condition Parameters: Name Type Description Default group_name str Name of the experimental condition. required folder_path str Path to the folder containing the data files required Returns: Name Type Description Condition Condition Data from the experimental condition Examples:","title":"load_condition"},{"location":"tennis/#vrgaze.tennis.services.io.load.load_condition--for-a-single-condition","text":">>> condition = load_condition ( \"Experts\" , \"path/to/folder\" ) >>> print ( condition ) >>> Name = Experts , Participants = 10 >>> >>> data = ExperimentalData ( condition )","title":"For a single condition:"},{"location":"tennis/#vrgaze.tennis.services.io.load.load_condition--for-several-conditions","text":">>> experts = load_condition ( \"Experts\" , \"path/to/folder\" ) >>> novices = load_condition ( \"Novices\" , \"path/to/folder\" ) >>> data = ExperimentalData ([ experts , novices ]) Source code in vrgaze/tennis/services/io/load.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def load_condition ( group_name : str , folder_path : str ) -> Condition : \"\"\"Load data from an experimental condition Args: group_name (str): Name of the experimental condition. folder_path (str): Path to the folder containing the data files Returns: Condition: Data from the experimental condition Examples: # For a single condition: >>> condition = load_condition(\"Experts\", \"path/to/folder\") >>> print(condition) >>> Name=Experts, Participants=10 >>> >>> data = ExperimentalData(condition) # For several conditions: >>> experts = load_condition(\"Experts\", \"path/to/folder\") >>> novices = load_condition(\"Novices\", \"path/to/folder\") >>> data = ExperimentalData([experts, novices]) \"\"\" reader = Reader () reader . discover_files ( folder_path ) reader . read_files () condition = Condition ( group_name , reader . participants ) return condition","title":"For several conditions:"},{"location":"tennis/#saving-data","text":"","title":"Saving data"},{"location":"tennis/#vrgaze.tennis.models.balleventmodels","text":"","title":"balleventmodels"},{"location":"tennis/#vrgaze.tennis.models.balleventmodels.BallHitFrontWall","text":"Bases: Event Ball was returned too hard and hit the front wall before landing on the court Source code in vrgaze/tennis/models/balleventmodels.py 19 20 21 class BallHitFrontWall ( Event ): \"\"\"Ball was returned too hard and hit the front wall before landing on the court\"\"\" pass","title":"BallHitFrontWall"},{"location":"tennis/#vrgaze.tennis.models.experiment","text":"","title":"experiment"},{"location":"tennis/#vrgaze.tennis.models.experiment.ExperimentalData","text":"Bases: Visitable Source code in vrgaze/tennis/models/experiment.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 @dataclass class ExperimentalData ( Visitable ): conditions : List [ Condition ] def __init__ ( self , data : Union [ List [ Condition ], Condition ]): if isinstance ( data , list ): self . conditions = data else : self . conditions = [ data ] def process ( self , visitor : \"Visitor\" ): for condition in self . conditions : condition . process ( visitor ) def analyze_trials ( self ): visitors = [ Preprocess (), BallEvents (), GazeEvents () ] for visitor in visitors : for condition in self . conditions : condition . process ( visitor ) def to_csv ( self , filepath : str ) -> None : \"\"\"Export gaze data to a CSV file. Args: filepath (str): File path to save the results Examples: # Exporting data >>> experts = load_condition(\"Experts\", \"example_data/tennis_data/experimental_condition\") >>> novices = load_condition(\"Novices\", \"example_data/tennis_data/experimental_condition\") >>> >>> data = ExperimentalData([experts, novices]) >>> data.analyze_trials() >>> data.to_csv(\"example_results.csv\") # Understanding the data FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\": The name of the condition given when the data is loaded >>> \"Participant\": The participant ID >>> \"BallNumber\": The current ball number >>> \"BlockNumber\": The current block number >>> \"TestID\": The current test number >>> \"IsValid\": Whether the trial is valid or not. A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp: The timestamp of the first bounce >>> FirstBouncePositionX: The X position of the first bounce >>> FirstBouncePositionY: The Y position of the first bounce >>> FirstBouncePositionZ: The Z position of the first bounce >>> SaccadeTimestamp: The timestamp of the predictive saccade >>> SaccadeAngleAmplitude: The angle amplitude of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeStart: The angle between the ball and the gaze direction at the start of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeEnd: The angle between the ball and the gaze direction at the end of the predictive saccade [degrees] >>> BallLandingPositionX: The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY: The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ: The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget: The distance between the ball and the target at the end of the predictive saccade \"\"\" writer = CSVWriter () for condition in self . conditions : writer . visit_condition ( condition , condition . name ) writer . save ( filepath )","title":"ExperimentalData"},{"location":"tennis/#vrgaze.tennis.models.experiment.ExperimentalData.to_csv","text":"Export gaze data to a CSV file. Parameters: Name Type Description Default filepath str File path to save the results required Examples:","title":"to_csv"},{"location":"tennis/#vrgaze.tennis.models.experiment.ExperimentalData.to_csv--exporting-data","text":">>> experts = load_condition ( \"Experts\" , \"example_data/tennis_data/experimental_condition\" ) >>> novices = load_condition ( \"Novices\" , \"example_data/tennis_data/experimental_condition\" ) >>> >>> data = ExperimentalData ([ experts , novices ]) >>> data . analyze_trials () >>> data . to_csv ( \"example_results.csv\" )","title":"Exporting data"},{"location":"tennis/#vrgaze.tennis.models.experiment.ExperimentalData.to_csv--understanding-the-data","text":"FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\" : The name of the condition given when the data is loaded >>> \"Participant\" : The participant ID >>> \"BallNumber\" : The current ball number >>> \"BlockNumber\" : The current block number >>> \"TestID\" : The current test number >>> \"IsValid\" : Whether the trial is valid or not . A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp : The timestamp of the first bounce >>> FirstBouncePositionX : The X position of the first bounce >>> FirstBouncePositionY : The Y position of the first bounce >>> FirstBouncePositionZ : The Z position of the first bounce >>> SaccadeTimestamp : The timestamp of the predictive saccade >>> SaccadeAngleAmplitude : The angle amplitude of the predictive saccade [ degrees ] >>> AngleBallToGazeAtSaccadeStart : The angle between the ball and the gaze direction at the start of the predictive saccade [ degrees ] >>> AngleBallToGazeAtSaccadeEnd : The angle between the ball and the gaze direction at the end of the predictive saccade [ degrees ] >>> BallLandingPositionX : The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY : The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ : The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget : The distance between the ball and the target at the end of the predictive saccade Source code in vrgaze/tennis/models/experiment.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def to_csv ( self , filepath : str ) -> None : \"\"\"Export gaze data to a CSV file. Args: filepath (str): File path to save the results Examples: # Exporting data >>> experts = load_condition(\"Experts\", \"example_data/tennis_data/experimental_condition\") >>> novices = load_condition(\"Novices\", \"example_data/tennis_data/experimental_condition\") >>> >>> data = ExperimentalData([experts, novices]) >>> data.analyze_trials() >>> data.to_csv(\"example_results.csv\") # Understanding the data FirstBounceTimestamp,FirstBouncePositionX,FirstBouncePositionY,FirstBouncePositionZ,SaccadeTimestamp,SaccadeAngleAmplitude,AngleBallToGazeAtSaccadeStart,AngleBallToGazeAtSaccadeEnd,BallLandingPositionX,BallLandingPositionY,BallLandingPositionZ,BallDistanceToTarget >>> \"Condition\": The name of the condition given when the data is loaded >>> \"Participant\": The participant ID >>> \"BallNumber\": The current ball number >>> \"BlockNumber\": The current block number >>> \"TestID\": The current test number >>> \"IsValid\": Whether the trial is valid or not. A trial is not valid if the ball is not returned or if the ball hits the front wall before the second bounce. >>> FirstBounceTimestamp: The timestamp of the first bounce >>> FirstBouncePositionX: The X position of the first bounce >>> FirstBouncePositionY: The Y position of the first bounce >>> FirstBouncePositionZ: The Z position of the first bounce >>> SaccadeTimestamp: The timestamp of the predictive saccade >>> SaccadeAngleAmplitude: The angle amplitude of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeStart: The angle between the ball and the gaze direction at the start of the predictive saccade [degrees] >>> AngleBallToGazeAtSaccadeEnd: The angle between the ball and the gaze direction at the end of the predictive saccade [degrees] >>> BallLandingPositionX: The X position of the ball at the end of the predictive saccade >>> BallLandingPositionY: The Y position of the ball at the end of the predictive saccade >>> BallLandingPositionZ: The Z position of the ball at the end of the predictive saccade >>> BallDistanceToTarget: The distance between the ball and the target at the end of the predictive saccade \"\"\" writer = CSVWriter () for condition in self . conditions : writer . visit_condition ( condition , condition . name ) writer . save ( filepath )","title":"Understanding the data"},{"location":"tennis/#plotting-data","text":"","title":"Plotting data"},{"location":"tennis/#vrgaze.tennis.services.plots.plot_3d","text":"","title":"plot_3d"},{"location":"tennis/#vrgaze.tennis.services.plots.plot_3d.plot_3d","text":"Plot ball trajectories in 3D space. Returns: Name Type Description plt pyplot The plot. Examples: >>> plot = plot_3d ( data ) >>> plot . show () >>> plot . savefig ( \"plot_3d.png\" ) Source code in vrgaze/tennis/services/plots/plot_3d.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def plot_3d ( data : ExperimentalData ) -> plt : \"\"\"Plot ball trajectories in 3D space. Returns: plt: The plot. Examples: >>> plot = plot_3d(data) >>> plot.show() >>> plot.savefig(\"plot_3d.png\") \"\"\" trajectories = [] enumerator = TrialEnumerator () data . process ( enumerator ) for trial in enumerator . trials : width = [ frame . ball_position_x for frame in trial . frames ] length = [ frame . ball_position_z for frame in trial . frames ] height = [ frame . ball_position_y for frame in trial . frames ] trajectories . append ( Trajectory ( length , height , width )) number_of_trajectories = len ( trajectories ) alpha = 1 / number_of_trajectories if alpha < 0.002 : alpha = 0.002 ax = plt . axes ( projection = '3d' ) for trajectory in trajectories : ax . plot3D ( trajectory . width , trajectory . length , trajectory . height , c = 'black' , alpha = alpha ) half_width = 10.97 / 2 half_length = 23.77 / 2 half_single_width = 8.23 / 2 to_service_t = 6.4 half_net_width = ( 10.97 + 0.91 ) / 2 # Service lines ax . plot ([ - half_width , half_width ], [ half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ - half_width , half_width ], [ - half_length , - half_length ], [ 0 , 0 ], color = 'black' ) # Sidelines ax . plot ([ - half_width , - half_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ half_width , half_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) # Single lines ax . plot ([ - half_single_width , - half_single_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) ax . plot ([ half_single_width , half_single_width ], [ - half_length , half_length ], [ 0 , 0 ], color = 'black' ) # T line ax . plot ([ - half_single_width , half_single_width ], [ - to_service_t , - to_service_t ], [ 0 , 0 ], color = 'black' ) ax . plot ([ - half_single_width , half_single_width ], [ to_service_t , to_service_t ], [ 0 , 0 ], color = 'black' ) ax . plot ([ 0 , 0 ], [ - to_service_t , to_service_t ], [ 0 , 0 ], color = 'black' ) # center nubbin ax . plot ([ 0 , 0 ], [ - half_length , - half_length + 0.3 ], [ 0 , 0 ], color = 'black' ) ax . plot ([ 0 , 0 ], [ half_length , half_length - 0.3 ], [ 0 , 0 ], color = 'black' ) # Net ax . plot ([ - half_net_width , half_net_width ], [ 0 , 0 ], [ 1.065 , 1.065 ], color = 'black' ) ax . plot ([ - half_net_width , half_net_width ], [ 0 , 0 ], [ 0 , 0 ], color = 'black' ) # net posts ax . plot ([ - half_net_width , - half_net_width ], [ 0 , 0 ], [ 0 , 1.065 ], color = 'black' ) ax . plot ([ half_net_width , half_net_width ], [ 0 , 0 ], [ 0 , 1.065 ], color = 'black' ) ax . set_aspect ( 'equal' ) ax . set_zlim ( bottom = 0 ) return plt","title":"plot_3d"},{"location":"tennis/#vrgaze.tennis.services.plots.plot_birdview","text":"","title":"plot_birdview"},{"location":"tennis/#vrgaze.tennis.services.plots.plot_side","text":"","title":"plot_side"}]}